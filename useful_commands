sudo apt-get install gfortran g++ gcc git python3-pip python3-yaml jupyter python3-numpy python3-scipy python3-matplotlib python3-pandas python3-sympy python3-nose vim emacs libblas-dev liblapack-dev python3-tables python3-jinja2 autoconf libtool libc6 libc6-dev gcc-multilib g++-multilib libx11-dev texlive-full texmaker aspell openmpi-bin libopenmpi-dev mpich libmpich-dev libpng-dev libhdf5-dev hdf5-tools libhdf5-mpich-dev libhdf5-openmpi-dev apt-file flex bison libeigen3-dev libboost-all-dev plocate
apt-file update
sudo pip3 install -U Sphinx sphinxcontrib-bibtex notebook Cython pytest

sudo apt-get install openconnect network-manager-openconnect network-manager-openconnect-gnome python-virtualenv

# Packages and libraries
------------------------
# to find a package
stat <package name>
# To find package name to install
sudo apt-get install apt-file
apt-file update
apt-file search <package name>

# Update default python
sudo update-alternatives --config python
update-alternatives: error: no alternatives for python3
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
sudo update-alternatives --config python
sudo update-alternatives  --set python /usr/bin/python3.8

# Installing Python in virtual environment
virtualenv -p python3.5  Py3.5
# To activate the environment
source Py3.5/bin/activate
# To deactivate the envirnment
deactivate

# Scipy image comparison package
--------------------------------
pip3 install -U scikit-image

# Update c++ compiler
sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-<latest_release"9"> g++-<latest_release"10">
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-<latest_release"10"> 20 --slave /usr/bin/g++ g++ /usr/bin/g++-<latest_release"10">

# Enable a 32-bit architecture
------------------------------
dpkg --print-foreign-architectures
# in case 32 bit not supported
# dpkg --add-architecture i386
# sudo apt-get update
# sudo apt-get install libc6:i386 libstdc++6:i386

sudo apt-get update
sudo apt-get install wine wine32 wine64 libwine libwine:i386 fonts-wine

# Install mcnp5 edited for ptrac processing
-------------------------------------------
make build CONFIG="gfortran" PREPROCESS= MARCH=M64 GNUJ=8

# alara
-------
cd ~/opt
git clone https://github.com/svalinn/ALARA
mkdir alara
cd ALARA
autoreconf -i
./configure prefix=~/opt/alara
make
make install prefix=~/opt/alara

# HDF5
------
mkdir -p ~/opt/dagmc_bld/HDF5_1_10/bld
cd ~/opt/dagmc_bld/HDF5_1_10
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz
tar -xvf hdf5-1.10.1.tar.gz
ln -s hdf5-1.10.1 src
cd bld
../src/configure --enable-shared --prefix=/home/mharb/opt/dagmc_bld/HDF5_1_10
make
make install
export PATH=$PATH:/home/mharb/opt/dagmc_bld/HDF5_1_10/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/mharb/opt/dagmc_bld/HDF5_1_10/lib

## Install a docker images instead
# without travis tests

# moab for pyne
-------------
mkdir ~/opt/dagmc_bld/MOAB_4_9_1
cd MOAB_4_9_1
mkdir bld
git clone https://bitbucket.org/fathomteam/moab
cd moab
git checkout Version4.9.1
autoreconf -fi
cd ../
ln -ls moab src
cd bld
../src/configure --enable-shared --enable-dagmc --with-hdf5=/home/mharb/opt/dagmc_bld/HDF5_1_10 --prefix=/home/mharb/opt/MOAB_4_9_1
make
make install

pytaps
------
mkdir -p ~/opt/Pytaps_1_4
wget https://pypi.python.org/packages/source/P/PyTAPS/PyTAPS-1.4.tar.gz
tar zxvf PyTAPS-1.4.tar.gz
cd PyTAPS-1.4
python setup.py --iMesh-path=/home/mharb/opt/MOAB_4_9_1 --without-iRel --without-iGeom install --user

pyne
----
git clone https://github.com/pyne/pyne.git
cd pyne
git checkout develop

# dagmc
-------
# moab
------
*** Don't check out a specific version, just use master ***
mkdir -p ~/opt/dagmc_bld/MOAB_5/bld
cd MOAB_5
git clone https://bitbucket.org/fathomteam/moab
cd moab
autoreconf -fi
cd ..
ln -s moab src
cd bld
../src/configure --enable-optimize --enable-shared --disable-debug --with-hdf5=/home/mharb/opt/dagmc_bld/HDF5_1_10 --prefix=/home/mharb/opt/dagmc_bld/MOAB_5
make
make check
make install

# dagmc_sddr
------------
mkdir -p /home/mharb/opt/dagmc_bld/DAGMC
cd /home/mharb/opt/dagmc_bld/DAGMC
git clone https://github.com/ljacobson64/DAGMC
cd DAGMC
git checkout ibrahim
cd mcnp/mcnp5
mv Source s
cp -r /home/mharb/opt/MCNP/MCNP_CODE/MCNP5/Source .
cp s/src/* Source/src/.
chmod +x measure.cpp  measure.h  source.F90  source_sampling.cpp  source_sampling.h
chmod -R u+rw Source
patch -p0 < patch/dagmc.5.1.60.patch
cd mcnp/mcnp6
cp -r /home/mharb/opt/MCNP/MCNP_CODE/MCNP6/Source .
chmod -R u+rw Source
patch -p0 < patch/dagmc.6.1.1beta.patch
cd /home/mharb/opt/dagmc_bld/DAGMC
mkdir bld
cd bld
cmake ../DAGMC/ -DBUILD_MCNP5=ON -DCMAKE_INSTALL_PREFIX=/home/mharb/opt/dagmc_bld/DAGMC
make
make install

# Visit
mkdir -p ~/opt/visit2_13
cd ~/opt/visit2_13
get tar from https://wci.llnl.gov/simulation/computer-codes/visit/executables
create install txt
./install 2.13.0 linux-x86_64-ubuntu14 ~/opt/visit2_13


# Docker
--------
# Build an image
docker build -f <Docker file> -t <docker image name> .
# Create a container from an existing image
docker run -it  --name=<container_name> <image_name>
# Create a container with a mapped folder from the local drive
docker run -it  -v /path/to/folder/to/mount:/path/to/folder/to/mount/into --name=<container_name> <image_name>
# Open an existing container
docker start -i <container_name>
# open a new terminal of an existing container
docker exec -it <container_name> bash
# List images
docker images -a
# delete image
docker rmi <image_id> --force
# list containers
docker ps -a
# delet containers
docker rm <container_id>

# PDF
# Join pdf files
sudo apt-get install pdftk
pdftk file1 file2 cat output file_output

# LaTeX
-------
# spell checking
aspell -t -c <file name>

# Reboot issue
- tap > boot to last stable image (recovery mode) > update boot loader > repair dpkg

# MPI fixes
export FI_SOCKETS_IFACE=eth0
export FI_PROVIDER=tcp
export FI_LOG_LEVEL=debug
export I_MPI_FABRICS=shm

# OpenGL
sudo apt-get install libxinerama-dev libxcursor-dev libxi-dev freeglut3-dev
git clone https://github.com/glfw/glfw.git
cd glfw
mkdir build
cmake .. -DCMAKE_INSTALL_PREFIX=<build>
make && make install

# FreeType
sudo apt-get install bzip2 libharfbuzz-dev

# General notes
---------------
- pytrac:
  save event arrays to txt files and read using numpy.loadtxt rather than concatenate arrays
  
#github SSH keys
ssh-keygen -t ed25519 -C "moatazharb@gmail.com"
cat ~/.ssh/id_ed25519.pub
add the following to ~/.ssh/config
  Host github.com
  Hostname ssh.github.com
  Port 443

#VTK
sudo apt install cmake libavcodec-dev libavformat-dev libavutil-dev libboost-dev libdouble-conversion-dev libeigen3-dev libexpat1-dev libfontconfig-dev libfreetype6-dev libgdal-dev libglew-dev libhdf5-dev libjpeg-dev libjsoncpp-dev liblz4-dev liblzma-dev libnetcdf-dev libnetcdf-cxx-legacy-dev libogg-dev libpng-dev libpython3-dev libqt5opengl5-dev libqt5x11extras5-dev libsqlite3-dev libswscale-dev libtheora-dev libtiff-dev libxml2-dev libxt-dev qtbase5-dev qttools5-dev zlib1g-dev
git clone https://gitlab.kitware.com/vtk/
git checkout v8.2.0
mkdir build %% cd build
rm -rf * && cmake .. -DCMAKE_INSTALL_PREFIX=/home/mharb/Installs/vtk -DCMAKE_INSTALL_RPATH=/home/mharb/Installs/vtk -DVTK_Group_Qt=ON -DVTK_Group_Imaging=ON -DVTK_Group_Views=O -DModule_vtkRenderingFreeTypeFontConfig=ON -DVTK_WRAP_PYTHON=ON -DVTK_PYTHON_VERSION=3 -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.10 -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.10.so -DBUILD_TESTING=OFF -DVTK_USE_SYSTEM_LIBRARIES=ON -DVTK_USE_SYSTEM_LIBPROJ=OFF -DVTK_USE_SYSTEM_GL2PS=OFF -DVTK_USE_SYSTEM_LIBHARU=OFF -DVTK_USE_SYSTEM_PUGIXML=OFF -DCMAKE_BUILD_TYPE=Release

# OpenMC
Install latest cmake: 
$ cmake .. -DCMAKE_USE_OPENSSL=OFF
Install libmesh
Install MOAB:
$ mkdir MOAB
$ cd MOAB
$ git clone https://bitbucket.org/fathomteam/moab
$ cd moab
$ autoreconf -fi
$ cd ..
$ ln -s moab src
$ ../src/configure --enable-optimize --enable-shared --disable-debug --with-hdf5=/usr/lib/x86_64-linux-gnu/hdf5/serial --download-netcdf --prefix=/home/mharb/Installs/MOAB/build
$ make && make install

cmake .. -DOPENMC_USE_DAGMC=on -DCMAKE_PREFIX_PATH=/home/mharb/Installs/dagmc/DAGMC/build -DOPENMC_USE_LIBMESH=on -DCMAKE_PREFIX_PATH=/home/mharb/Installs/libmesh/build -DHDF5_PREFER_PARALLEL=on -DOPENMC_USE_MPI=on -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/home/mharb/Installs/openmc
# install conda
# install vectfit
conda install -c conda-forge xtensor-blas xtensor-python
git clone https://github.com/liangjg/vectfit.git
pip install ./vectfit

download data using tools/ci/
# run tests using
OPENMC_CROSS_SECTIONS=/home/mharb/Sources/Nuclear_Data/openmc/nndc_hdf5/cross_sections.xml OPENMC_ENDF_DATA=/home/mharb/Sources/Nuclear_Data/openmc/endf-b-vii.1 pytest-3
